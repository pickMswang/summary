A.线程基础
1.线程的组成
每一个进程都至少有一个线程，进程时间有两个组成部分：一个进程的内核对象和一个地址空间，同样的线程也有两个组成部分：
线程的内核对象：操作系统用它来管理线程，通过它来存放线程统计信息。
线程栈：一般为1MB可以通过链接器中的选项来更改它的大小。
2.线程与进程的关系
进程从来不执行任何东西，它是线程的容器，线程必然是在某个进程的上下文创建的，而且会在创建它的进程内部终其一生。这也意味着线程要在进程的地址空间内执行代码和处理数据。一个进程拥有至少一个线程(主线程)，这些线程共享内核对象的句柄，因为句柄表是针对每一个进程的。
3.主线程
每次初始化进程时，系统都会创建一个主线程，这个线程首先会执行C/C++运行库的启动代码，后者调用入口函数(_tmain或_tWinMain)，并继续执行，直至入口点函数返回C/C++运行库的启动代码，后者最终将调用ExitProcess。
4.用户界面线程
通常应用程序应该有一个用户界面线程，此线程负责创建所有的窗口，另外还有一个GetMessage循环，用户界面线程的优先级通常高于工作线程，这样用户界面才能迅速响应用户的操作。
5.CreateThread函数
1.
2.
3.
4.
5.
6.
7.
8.	HANDLE CreateThread(
PESCURITY_ATTRIBUTES psa,              
DWORD cbStackSize,
PTHREAD_START_ROUTINE pfdStartAddr,
PVOID pvParam,
DWORD dwCreateFlags,
PDWORD pdwThreadId
);
cbStackSize 线程栈的大小，默认为1MB，这样设定了栈空间的上限，捕获代码中无穷递归的错误，如果没有定义栈空间的上限且代码有错误时，系统会将进程的所有地址空间分配给线程，直至消耗殆尽。
pfdStartAddr，pvParam 线程函数与参数，需要注意：传入参数尽量不要使用局部变量，若一个线程结束，该线程的局部变量会被回收，如果在其内部创建了线程并且把这个局部变量作为参数传递进去，将会产生访问越界；注意函数内部静态变量的使用，如果有两个线程执行同一个函数，这个静态变量是共享的。
dwCreateFlags 为0时线程创建完成后立刻开始执行，如果为CREATE_SUSPEDNED，等待唤醒后开始执行。
6.线程创建的流程：
初始化线程的参数，内核对象使用计数为2且为未触发状态，暂停计数为1。
系统从进程中分配一些内存作线程栈，且栈第一个值为函数参数，第二个值为函数指针。
线程的上下文：每个线程都有其自己的一组CPU寄存器，称为线程的上下文。线程的上下文保存了线程上一次执行时，线程的CPU寄存器的状态。线程的CPU寄存器全部保存在CONTEXT结构中，且其本色保存在线程的内核对象中。
线程初始化完成之后，检查CREATE_SUSPENDED标志是否已经传给CreateThread函数，如果没有传递，挂起计数减一为0，线程可被系统调度。
执行RtlUserThreadStart()
围绕线程函数会设置一个结构化异常处理，这样线程期间所有异常系统都会处理。
调用线程函数,并将参数传递进去。
线程函数返回时，调用ExitThread，结束线程。
线程产生一个未被处理时异常调用ExitProcess，结束进程。
7.结束线程的方法：
线程函数返回
线程函数中创建的所有C++的类对象通过调用其析构函数销毁。
操作系统释放线程栈空间。
操作系统将退出代码设为线程函数返回值。
系统递减线程内核对象的使用计数。
ExitThread(_endthreadex及其他替代函数)
杀死调用该函数的线程，不会回收C/C++资源(例如：C++类对象)
TerminateThread(异步函数，通知某一线程结束，但结果不确定)
杀死指定线程，内核对象使用计数递减，但不会回收线程栈空间，调用Terminate后，其他线程也可使用该线程的栈空间。
进程结束时结束
结果同TerminateThread类似，且影响到全部线程。
8.线程终止运行时
线程用的所有用户对象句柄会被释放，在windows中，大多数对象为进程所有，但窗口和挂钩可以为线程私有。
内核对象设为触发状态。
如果为进程的最后一个线程，进程终止。
线程内核对象减1。
9.使用_beginthreadex和_endthread
某一个线程调用了系统函数，并且改变了全局变量，在这个线程未作有关这个全局变量的处理时被打断，系统调用其他线程，其他线程改变了这一全局变量，那么线程执行的结果是不可预测的，所以在调用C/C++运行库函数时，这些函数会去查找主调现成的数据块。每一个线程应该有一个自己的数据块，防止各个线程之间的相互影响，_beginthreadex完成了这一功能。
_beginThreadex内部流程：
申请数据块空间(堆区),初始化数据块(线程函数指针，参数)，调用CreateThread(传入_threadstartex函数指针，数据块地址)，保存线程句柄，返回线程id。
_threadstartex将线程与数据块关联起来，调用_callthreadstartex（其内部调用线程函数，处理与C/C++运行库的很多任务)，在线程结束时调用_endthreadex函数来回收数据块。
对使用_beginthreadex创建的线程，无需在线程函数内部调用_endthread函数。
与之相对应的出现了_endthreadex函数：
该函数先销毁该线程的数据块，然后调用ExitThread函数(如果直接调用ExitThread，数据块无法销毁产生内存泄漏)。
如果使用CreateThread会有什么后果？
创建线程时，系统会检测到线程没有相对应的数据块，并且为其分配一个。该内存块不会随线程接收而被回收，产生内存泄漏。
由于缺少对C/C++运行库的相关处理，使用一些函数时可能导致进程终止。
10.线程的状态


B.线程同步
为什么要线程同步？
Windows是一个抢占式的多线程环境，线程可能在任意时刻暂停一个线程而去执行另一个线程，如果两个线程要对同一个变量进行操作，将会产生不可预知的后果。
用户模式下的线程同步：
1.原子访问：Interlocked系列函数
原子访问：保证某一时刻只有一个线程操作某一数据。
Interlocked系列函数：无需在用户模式和内核模式切换，执行极快。
加法：InterlockerExchangeAdd(PLONG volatile plAddend,LOND lIncrement);  
该函数执行的结果：*plAddend + lIncrement
交换：InterlockedExchange
比较交换：InterlockedCompareExchange

利用InterlockedExchange实现简单的旋转锁：
	Void Funcl(){
  While(InterlockedExchange(&data,TRUE) == TRUE)  //等待
     Sleep(0);
  //执行相关操作

  InterlockedExchange(&data,FALSE);    //让另一个线程执行
}
注意事项：
对于使用旋转锁的两个线程，应该以相同的优先级运行。
保证锁变量和锁数据位于不同的高速缓存行。
单CPU应避免使用旋转锁。
2.高速缓存行
CPU从内存中读取数据是，需要将内存中数据读入高速缓存行后给CPU使用。一般应用程序会对一组相邻的字节进行操作，如果所有字节都在高速缓存中，CPU就不用访问内存总线，节省大量时间。
EX：
CPU1读取一个字节，这一个字节和其相邻字节读入CPU1的高速缓存行
CPU2读取相同字节，这一个字节和其相邻字节读入CPU2的高速缓存行
CPU1修改这个字节，修改数据存入CPU1的高速缓存行中，但还未写入内存
CPU2 再次读取这个字节，由于这个字节在自己的高速缓存行中，不会去内存中或者数据。
可以看出多核处理器高速缓存行的问题，于是CPU设计为当一个CPU修改了高速缓存行中的数据时，其他CPU的高速缓存行会被作废。
应根据高速缓存行的大小将应用程序的数据组织在一起，将数据的缓存行的边界对齐，把制度数据与可读写数据分别存放，把差不多会同一时间访问的数据组织在一起。
_declspec(align(#)):对字段加齐控制，#(高速缓存行大小)
Struct _declspec(align(#)) Node{
。。。。。       //只读数据
_declspec(align(#))
。。。。。       //读写数据
}；
3.关键段
关键段是一小段代码，它在执行之前需要独占对一些共享资源的访问权。
CRITICAL_SECTION结构
Void InitializeCriticalSection(CRITICAL_SECTION pcs);  
Void EnterCriticalSection(CRITICAL_SECTION pcs);
Void LeaveCriticalSection(CRITICAL_SECTION pcs);
Void DeleteCriticalSection(CRITICAL_SECTION pcs);

EnterCriticalSection()详情：
(1)如果没有线程正在访问资源，更新锁变量，表示调用线程已经获得对资源的访问，并立即返回。
(2)如果有线程正在访问资源，使用事件内核对象使调用线程切换到等待状态。如果访问资源的线程结束访问，更新锁变量，在将等待的线程切换为可调度状态。
(3)TryEnterCriticalSection()代替，不会让调用线程进入等待状态，判断锁变量后立即返回。
LeaveCriticalSection()详情：
检查锁变量并将计数器减一，如果计数器大于0直接返回，若等于0，更新锁变量，把处于等待状态的线程切换回可调度状态。
4.读写锁
区分读进程与写进程，读时共享，写时排斥。
SRWLOCK结构
Void InitializeSRWLock(SRWLOCK SRWLock);
Void AcquireSRWLockExclusive(SRWLOCK SRWLock);  //写入线程调用，保证独占
Void ReleaseSRWLockExclusive(SRWLOCK SRWLock);		//解除独占
Void AcquireSRWLockShared(SRWLOCK SRWLock);  		//读取线程调用
Void ReleaseSRWLockShared(SRWLOCK SRWLock);			//完成读取

同步机制性能比较
Volatile读取>volatile写入>Interlocked递增>读写锁>关键段>互斥量

5.条件变量
以特定的条件唤醒某一阻塞线程，与关键段或读写锁共同使用。
PCONDITION_VARIABLE结构
InitializeConditionVariable();    
SleepConditionVariableCS();   //与关键段共同使用 
SleepConditionVariableCS();   //与读写锁共同使用
WakeAllConditionVariable();   //唤醒所有阻塞线程
WakeConditionVariable();     //唤醒一个阻塞线程
内核模式下的线程同步
C.线程池
D.线程池之死锁
E.进程基础，内存管理
F.进程间通信
G.静态库
H.动态库
I.UDP
J.TCP
K.文件传输
L.项目框架








M.IO模型

一个数据包的收发分为两个部分：
1.内核读取数据
2.内核将数据拷贝到用户态。

什么是阻塞，非阻塞，同步，异步：

阻塞和非阻塞的区别在于：进程访问数据时，数据未就绪，进行是否需要等待。阻塞：进程等到有结果再返回，函数返回。非阻塞：请求完立即返回，不论是否接收到数据。
异步和同步的区别在于：主动查看还是被动通知的区别，访问数据的机制不同。同步：主动请求，并等待I\O操作完毕，当数据读写时阻塞。异步：主动投递请求后可以，可处理其它事情，被调用者通过状态、事件、回调函数来通知被调用者。读取数据不阻塞。

同步阻塞多线程

同步阻塞多线程的缺点：
该模型可以是最初始的网络模型，它的很多缺点都在后面的模型中逐渐解决。
1.该模型特点是一个客户端对应一个线程，进程要给每一个线程分配线程栈空间和内核对象，若有很多客户端链接服务器，但却没有任何响应，将会浪费大量的空间。
2.所有的recv线程都阻塞等待客户端数据，当客户端数据到达时，recv函数开始等待数据接收完成，随后完整的数据进入到内核空间，内核空间的数据拷贝到用户空间，拷贝完成后recv函数返回。
3.由于线程过多，若同时有多个客户端同时发送数据，多个线程同时启动，会产生线程的上下文切换的问题
Select模型

select模型解决了线程数量过多的问题，解决了无用线程占用资源的情况。但它仍然存在一些缺点：
1.由于是轮询检查有信号client，效率过于低下，且有多个客户端同时发送数据时，处理有一定的先后顺序，若某一客户端处理时间过长，会影响到其他客户端的数据接收与处理。
2.有64的数量限制，若想对select模型进行扩容难度较大。
3.select有信号返回，数据处于未接收状态，调用recv函数后，等待数据接收完毕并有内核拷贝到用户空间，浪费时间。
异步选择模型

异步选择模型解决了select轮询的蠢笨方法，利用windows下窗口通知的机制达到异步操作的效果，但受限与操作系统，仅能在windows下使用。通过WSAAsyncSelect函数将通知消息与socket绑定，但socket有信号时，内核接收数据，接收完成后，发送消息给对应窗口，窗口检查消息并调用响应的消息处理函数，recv接收数据将数据从内核空间拷贝到用户空间。
异步选择模型仍然有很多缺点：
1.通过消息通知的机制达到异步，但是当有大量客户端链接时，消息队列过长，网络消息不能够及时响应，影响效率。
2.没有解决数据从内核拷贝到用户空间时间浪费问题。





异步事件模型

异步事件模型通过事件与socket构成一定的关系，当socket有信号时，事件置为有信号，通过判断事件状态执行响应操作，当事件有信号时，内核已经成功接收数据。再调用recv函数，将数据从内核拷贝到用户空间，并做相应处理。
缺点：
异步事件同select模型一样，只能同时检查64个socket的状态，且扩容难度较大，但同select相比，在内核接收数据时节省了事件，同异步选择相比，省去了繁琐的消息通知机制，但以上模型，都需要阻塞等待内核向用户空间的数据拷贝。

重叠I/O事件通知
重叠I/O：执行I/O请求的时间与线程执行其他任务的时间是重叠的。
Typedef struct _OVERLAPPED{
   DWORD Internal;       //错误码，STATUS_PENDING：I/O操作未完成
   DWORD InternalHigh;   //已传输的字节数
   DWORD Offset;         //两者构成一个偏移量，用于多个重叠结构对同一
   DWORD OffsetHigh;     //文件操作时的偏移计数
   HANDLE hEvent;        //事件句柄
}OVERLAPPED,*LPOVERLAPPED;
重叠结构是用户向系统提交异步请求的一个数据结构，他包含以上内容，一般来说会与其他结构混合使用，例如WSARecv，在投递接收请求时要传入一个重叠结构以示异步操作并存储重要信息，还需要创建接收缓冲区来接收数据，当有数据到来时，数据拷贝到接收缓冲区，并回馈相应信息给重叠结构，重叠结构告知用户并处理数据。


重叠IO属于异步操作，用户通过两种方法，完成历程与事件通知得到异步操作完成的信号。练习Demo为事件通知的方式。
事件通知：可以看到重叠结构中最后一个参数为事件句柄，当一个异步操作完成时，系统会监测异步操作对应的重叠结构中是否存在事件句柄，如果存在事件句柄，将该事件置为有信号，这样我们通过WSAWaitForMultipleEvents就可以知道IO操作是否完成。若我们不关心异步操作是否完成(WSASend操作)，可以将重叠结构中的事件句柄置为NULL。
注意事项：
1.当使用重叠结构时，投递异步操作的设备要以异步的方式打开，例如socket创建时，需要加入WSA_FLAG_OVERLAPPED。
2.投递IO请求后，若IO请求未完成，调用GetLastError()会有ERROR_IO_OENDING错误，待异步操作完成后，将不会有错误。
3.当我们投递一个IO请求时，系统会将它投入处理队列中，但系统不一定会以先入先出的方式处理，也就是说，先投递的IO请求不一定先完成。

可提醒IO方式(不建议使用):
当系统创建一个线程时，会同时创建一个与线程相关联的队列，这个队列称为异步过程调用队列(APC)。一般的投递任务仅仅是投递IO请求，而不会对APC队列有相关操作，但部分*Ex系列函数会对APC有具体的操作，他们会将IO操作完成通知添加到线程的APC队列中，线程为了处理APC队列中的信息，必须将自己置为可提醒状态，而不是处于睡眠状态。
常见的*Ex系列函数有：
SleepEx()
WaitForSingleObjectEx()
WaitForMultipleObjectsEx()
GetQueueCompletionStatusEx();
在调用这些函数的线程中，当APC队列为空时线程才会处于睡眠状态。
应用：
当我们调用WaitForSingleObject时，线程处于睡眠状态，如何能让线程运行起来并退出呢？
如果我们使用WaitForSingleObjectEx函数使线程处于睡眠状态，调用QueueUserAPC函数，向指定线程的APC队列投入一个NULL消息，线程就会退出睡眠状态，并且WaitForSingleObjectEx函数返回WAIT_IO_COMPLETION，这样我们就可以退出一个睡眠状态的线程了。
重叠I/O事件问题：
使用重叠I/O模型，成功解决了数据从内核拷贝到用户空间时间浪费的问题，但还是受限于hEvent，只能监测64个客户端，有一定的数量限制。

重叠I/O完成例程：
在创建完成例程，投递WSARecv任务的时候，注意WSARecv函数最后一个参数，即为完成例程的回调函数，当WSARecv完成后，直接跳转到完成例程的回调函数中，在回调函数中，我们处理数据，并再次投递WSARecv任务。
缺点：
回调函数是谁执行的？很显然，我们没有创建任何一个线程来执行这个函数，它是由主控线程来完成的，这样我们就无法同时处理多个客户端的数据。


完成端口
通过之前重叠IO的学习，了解到如何投递一个异步操作，但是管理这些异步操作还是比较繁琐的，例如使用事件通知的机制，我们需要将事件，ClientSocket和接收缓冲区存在一个数组内，通过WaitForMultipleObjects得到有信号事件在数组中的偏移量，得到数据与socket并处理。
存在以下问题：
1.当有许多IO操作时，如何区分IO操作的类型，如Recv，Send，Accept。
2.当有很多IO操作时，怎么统计这个IO操作的相关数据。
3.若采用多线程的方式处理IO操作，如何分配达到每个线程负载均衡。
完成端口是将重叠IO与多线程整合的一个加强版，通过管理重叠IO并配合多线程使用，达到最佳的性能。

在使用完成端口之前，需要先了解一个函数AcceptEx()，原来的Accept()函数是阻塞等待客户端链接并为其分配socket，当有多个客户端同时链接时，accept为其中一个客户端创建socket并完成绑定，其他客户端等待，作为一个大型的服务器这是很不可取的。
AcceptEx()解决了这一问题，它的功能是，预先准备好socket，客户端请求到达后直接创建链接，且为非阻塞状态，也就是说如果提前准备了十个socket，若有十个客户端链接服务器，他们建立链接的过程是同时进行的，这样就解决了大量客户端同时链接服务器的问题。


1.首先我们需要创建一个完成端口：
HANDLE WINAPI CreateIoCompletionPort(
  _In_     HANDLE    FileHandle,        //要与完成端口绑定的句柄
  _In_opt_ HANDLE    ExistingCompletionPort,  //完成端口句柄,为NULL时创建
  _In_     ULONG_PTR CompletionKey,    //绑定句柄的类型标识
  _In_     DWORD     NumberOfConcurrentThreads //允许多少线程同时调用
);
这个函数有两个功能:创建一个完成端口和与指定的完成端口绑定。
2.接下来，创建工作者线程，工作者线程等待完成端口返回。
BOOL WINAPI GetQueuedCompletionStatus(
  _In_  HANDLE       CompletionPort,      //要监测的完成端口
  _Out_ LPDWORD      lpNumberOfBytes,  //已经传输的字节数
  _Out_ PULONG_PTR   lpCompletionKey, //响应句柄的类型标识
  _Out_ LPOVERLAPPED *lpOverlapped,  //绑定的重叠结构
  _In_  DWORD        dwMilliseconds     //等待时间
);

我们需要特别注意第三个参数：它在某一句柄绑定完成端口时传入的，通过这个参数可以判断接下来具体操作。
3.创建listensocket，与完成端口绑定，调用acceptex投递socket等待客户端链接。
通过bind，listen等一系列操作，得到listensocket，利用步骤1中的函数与完成端口绑定，无类型标识，无重叠结构，因为listensocket相关的异步操作交给acceptex去完成了。
acceptex函数不能使用库直接调用(?)，需要使用WSAIoctl(),传入相关类型得到其函数指针。利用WSASocket函数创建一个socket，并调用AcceptEx与listensocket绑定。
BOOL AcceptEx(
  SOCKET       sListenSocket,    //listensocket
  SOCKET       sAcceptSocket,   //要投入的socket
  PVOID        lpOutputBuffer,   //接收缓冲区，接收第一组数据
//clientaddr,server地址
  DWORD        dwReceiveDataLength, //第一组数据大小
  DWORD        dwLocalAddressLength, //存放本机地址大小
  DWORD        dwRemoteAddressLength, //存放client地址大小
  LPDWORD      lpdwBytesReceived,     //实际接收多大
  LPOVERLAPPED  lpOverlapped          //对应的重叠结构
);
通过这个函数，就可以将创建的socket与listensocket绑定，当有客户端链接服务器后，完成端口监测到listensocket有信号并返回。这时出现了一个问题，我们知道有客户端链接了，但是却不知道是哪一个客户端！完成端口返回的标识信息为listensocket与完成端口绑定时的标识信息。但请注意一点：我们在将listensocket与完成端口绑定时，没有投递重叠结构，而在调用AcceptEx与listensocket绑定时投递一个一个异步操作并指定了对应的重叠结构，当获取完成端口状态并返回时，这个异步操作结束，完成端口收到这个重叠结构的地址，并返回，通过这个重叠结构我们就可以知道是当初创建的哪一个clientsocket建立了链接。
那么怎么根据重叠结构得到client信息，需要用到下面这个宏定义：
PCHAR p = CONTAINING_RECORD(PCHAR,TYPE,PCHAR);
PER_IO_CONTEXT* pIoContext = CONTAINING_RECORD(pOverlapped, PER_IO_CONTEXT, m_Overlapped); 
这个宏的作用：pOverlapped是具体的地址，它在是PER_IO_CONTEXT结构中的Overlapped参数，返回pOverlapped所在PER_IO_CONTEXT结构的地址。
需要我们在投递clientsocket将其封装
typedef struct _PER_IO_CONTEXT
{
	SOCKET		   Socket;
	OVERLAPPED     m_Overlapped; // 每一个重叠网络操作的重叠结构(针对每一个Socket的每一个操作，都要有一个)              
	WSABUF         m_wsaBuf;    // WSA类型的缓冲区，用于给重叠操作传参数的
	char           m_szBuffer[DATA_BUFSIZE];  // 这个是WSABUF里具体存字符的缓冲区
	OPERATION_TYPE m_OpType;                  // 标识网络操作的类型(对应上面的枚举)
} PER_IO_CONTEXT;
这样，完成端口返回的socket为listensocket，因为它产生了信号，而返回的重叠结构是投递clientsocket时绑定的重叠结构，因为具体是它产生了异步操作，知道重叠结构的地址并调用上面介绍的宏，就可以得到对应clientsocket一系列信息。
4.通过以上方法，我们完成了客户端与服务器的链接，得到了对应的client信息，接下来我们需要接收client发来的数据。
同listensocket一样，与完成端口绑定，绑定时要指定重叠结构和类型，因为要执行异步接收操作。绑定绑定完成后，使用WSARecv函数投递异步接收请求。
int WSAAPI WSARecv(
  SOCKET        s,         //clientsocket
  LPWSABUF      lpBuffers,  //接收缓冲区
  DWORD        dwBufferCount, //接收几次
  LPDWORD      lpNumberOfBytesRecvd, //接收多少数据
  LPDWORD      lpFlags,               //标识(详见MSDN)
  LPWSAOVERLAPPED     lpOverlapped,   //重叠结构
  LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine   //NULL
);
当客户端发送数据给服务器时，服务器会自动接收数据，将数据从内核缓冲区拷贝到我们创建的接收缓冲区，完成端口成功监测并返回对应的重叠结构与标识，我们就可以使用数据完成相应的操作。
以上为完成端口的具体实现过程，接下来我们来了解完成端口其内部原理。
完成端口模型是目前为止最佳的网络模型，它有以下优点：
1.使管理client更加简单。
2.多线程调用更加合理。
对比前两个重叠I/O模型，第一个很难管理client对应的事件与socket句柄，第二个无法做到多线程的操作。完成端口建立了一系列的机制来解决了这两个问题。
完成端口内部共有五个数据结构，通过他们完成client的管理与线程的调度：
1.设备列表
每个设备绑定完成端口时，完成端口会将其设备句柄，设备类型标识加入设备列表中，当设备句柄被关闭时，完成端口会将其从中删除，例如：客户端下线。
2.I/O完成队列
其中包含I/O操作传输的字节数，设备类型标识，重叠结构，错误代码。当由I/O操作完成时，将其相关信息加入该队列中，GetQueueCompletionStatus函数检测到队列不为空，返回。我们也可以通过PostQueueCompletionStatus函数向其加入一个NULL的I/O操作，以唤醒线程。
3.等待线程队列(后入先出)
等待状态的线程id，当I/O完成队列不为空时，调用线程并将其id从中删除。
4.已释放线程列表
正在工作的线程id，当线程工作完成时，将该线程id从中删除并加入结构3中。线程调用函数将自己挂起，将该线程id从中删除并加入结构5中。
5.已暂停线程列表
唤醒挂起线程时，将该线程id从中删除并计入到结构4中。

下面我们具体分析以下：
1.当有一个客户端链接服务器时，会从acceptex函数投递的socket中拿出一个给链接的客户端使用，建立链接。
2.listensocket完成了异步操作，完成端口将该异步操作的相关信息加入到结构2的I/O完成队列中。
3.完成端口检测到I/O完成队列不为空，从结构3的等待线程队列中唤醒一个，并加入结构4中，该线程内部调用的GetQueueCompletionStatus函数返回。
4.函数同时返回了异步操作完成的重叠结构，通过重叠结构我们找到与之绑定的缓冲区，获得数据并处理数据。
5.处理数据完毕，完成端口将该线程id从结构4挪回结构3，若此过程有挂起操，加入到结构5中。





N.数据库
O.Vs与MySql链接
