

什么是自旋锁？
自旋锁（spinlock）：是指当一个线程在获取锁的时候，
如果锁已经被其它线程获取，那么该线程将循环等待
，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。

获取锁的线程一直处于活跃状态，
但是并没有执行任何有效的任务，
使用这种锁会造成busy-waiting。

它是为实现保护共享资源而提出一种锁机制。
其实，自旋锁与互斥锁比较类似，
它们都是为了解决对某项资源的互斥使用。无论是互斥锁，
还是自旋锁，在任何时刻，最多只能有一个保持者，也就说，
在任何时刻最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。
对于互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。
但是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，
调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，
”自旋”一词就是因此而得名。




简单回顾一下CAS算法
CAS算法 即compare and swap（比较与交换），
是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，
也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（
Non-blocking Synchronization）。CAS算法涉及到三个操作数

需要读写的内存值 V
进行比较的值 A
拟写入的新值 B
当且仅当 V 的值等于 A时，
CAS通过原子方式用新值B来更新V的值，
否则不会执行任何操作（比较和替换是一个原子操作）
。一般情况下是一个自旋操作，即不断的重试。
