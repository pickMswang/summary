为什么要给表加上主键？

为什么加索引后会使查询变快？

为什么加索引后会使写入，修改，删除变慢？

什么情况下要同时在两个字段上建索引？

平衡树非二叉  指的是 b tree b+ tree
主流的RDBMS 都是把平衡树当作数据表默认的索引数据结构   也有的用哈希桶

平时建表的时候会给表加上主键 在某些关系数据库中，如果建表时不指定主键，数据库会拒绝建表的语句执行
事实上，一个加了主键的表，并不能称之为表，一个没有加主键的表，它的数据无序的放置在磁盘存储器上，一行一行
的排列的很整齐，跟我们认知中的表很接近，但是给表加上主键，表在磁盘上的存储结构就由整齐排列的结构转变成了
树状结构，（平衡树） 整个表就变成了一个索引（聚集索引） O（logn）    不用索引O（n）
一个表只能有一个聚集索引，主键的作用是把表的数据格式转化成索引的格式存放
B＋tree的性质：

1.n棵子tree的节点包含n个关键字，不用来保存数据而是保存数据的索引。

2.所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。

3.所有的非终端结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字。



  























