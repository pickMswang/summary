深度优先遍历

可定义如下：
首先访问出发点v，并将其标记为已访问过；
然后依次从v出发搜索v的每个邻接点w。
若w未曾访问过，则以w为新的出发点继续进行深度优先遍历，
直至图中所有和源点v有路径相通的顶点均已被访问为止。
若此时图中仍有未访问的顶点，
则另选一个尚未访问的顶点为新的源点重复上述过程，
直至图中所有的顶点均已被访问为止。

广度优先遍历

可定义如下：首先访问出发点v，
接着依次访问v的所有邻接点w1、w2......wt，
然后依次访问w1、w2......wt邻接的所有未曾访问过的顶点。
以此类推，直至图中所有和源点v有路径相通的顶点都已访问到为止。
此时从v开始的搜索过程结束。


贪心算法

的基本思路是从问题的某一个初始解出发一步一步地进行，
根据某个优化测度，每一步都要确保能获得局部最优解。
每一步只考虑一个数据，他的选取应该满足局部优化的条件。
若下一个数据和部分最优解连在一起不再是可行解时
，就不把该数据添加到部分解中，
直到把所有数据枚举完，或者不能再添加算法停止


动态规划dp

算法的基本思想与分治法类似，
也是将待求解的问题分解为若干个子问题（阶段），
按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。
在求解任一子问题时，列出各种可能的局部解，
通过决策保留那些有可能达到最优的局部解，
丢弃其他局部解。
依次解决各子问题，最后一个子问题就是初始问题的解。
由于动态规划解决的问题多数有重叠子问题这个特点，
为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。

最短路径算法(迪杰斯特拉算法)

时间复杂度为O(n^2+e)，如果为稀疏图（e很小），可以看作为O(n^2)。
设置顶点集合S并不断地作贪心选择来扩充这个集合。
Dijkstra算法每次从s顶点的集合中取出具有最短特殊路长度的顶点u
，将u添加到S中
，同时对数组dist作必要的修改。
一旦S包含了所有V中顶点，dist就记录了从源到所有其它顶点之间的最短路径长度。
